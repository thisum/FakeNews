/**
 * Created by Thisum on 8/16/2016.
 */
"use strict";
exports.BASE_URL = 'http://localhost:7000';
/**
 * Defines response statuses. Should be used to determine status of the server communication
 * @type {number}
 */
(function (SERVER_RESPONSE_STATUS) {
    SERVER_RESPONSE_STATUS[SERVER_RESPONSE_STATUS["SUCCESS"] = 1000] = "SUCCESS";
    SERVER_RESPONSE_STATUS[SERVER_RESPONSE_STATUS["FAILED"] = 2000] = "FAILED";
    SERVER_RESPONSE_STATUS[SERVER_RESPONSE_STATUS["WARNING"] = 3000] = "WARNING";
})(exports.SERVER_RESPONSE_STATUS || (exports.SERVER_RESPONSE_STATUS = {}));
var SERVER_RESPONSE_STATUS = exports.SERVER_RESPONSE_STATUS;
;
var Constants = (function () {
    function Constants() {
    }
    Constants.getColourNTooltip = function (legColours, legTooltips, leg) {
        var i = 0;
        var colour = "#FFFFFF";
        var tooltip = 0;
        for (i = 0; i < leg.length; i++) {
            var temperature = leg[i] / 100;
            if (temperature <= 15) {
                colour = "#FFFFFF";
                tooltip = temperature;
            }
            else if (15 < temperature && temperature <= 20) {
                colour = "#00EAFF";
                tooltip = temperature;
            }
            else if (20 < temperature && temperature <= 24) {
                colour = "#007EFF";
                tooltip = temperature;
            }
            else if (24 < temperature && temperature <= 25) {
                colour = "#002AFF";
                tooltip = temperature;
            }
            else if (25 < temperature && temperature <= 26) {
                colour = "#4800FF";
                tooltip = temperature;
            }
            else if (26 < temperature && temperature <= 27) {
                colour = "#BA00FF";
                tooltip = temperature;
            }
            else if (27 < temperature && temperature <= 29) {
                colour = "#FF00B4";
                tooltip = temperature;
            }
            else {
                colour = "#FF0000";
                tooltip = temperature;
            }
            legColours[i] = colour;
            legTooltips[i] = String(tooltip);
        }
    };
    return Constants;
}());
exports.Constants = Constants;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QyxJQUFBO0FBdERZLGlCQUFTLFlBc0RyQixDQUFBIiwiZmlsZSI6InV0aWwvY29uc3RhbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IFRoaXN1bSBvbiA4LzE2LzIwMTYuXG4gKi9cblxuZXhwb3J0IGNvbnN0IEJBU0VfVVJMID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6NzAwMCc7XG5cbi8qKlxuICogRGVmaW5lcyByZXNwb25zZSBzdGF0dXNlcy4gU2hvdWxkIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHN0YXR1cyBvZiB0aGUgc2VydmVyIGNvbW11bmljYXRpb25cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBlbnVtIFNFUlZFUl9SRVNQT05TRV9TVEFUVVN7XG4gICAgU1VDQ0VTUyA9IDEwMDAsXG4gICAgRkFJTEVEID0gMjAwMCxcbiAgICBXQVJOSU5HID0gMzAwMFxufTtcblxuZXhwb3J0IGNsYXNzIENvbnN0YW50c3tcblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0Q29sb3VyTlRvb2x0aXAobGVnQ29sb3Vyczogc3RyaW5nW10sIGxlZ1Rvb2x0aXBzOiBzdHJpbmdbXSwgbGVnOiBudW1iZXJbXSApe1xuXG4gICAgICAgIGxldCBpOm51bWJlciA9IDA7XG4gICAgICAgIGxldCBjb2xvdXI6c3RyaW5nID0gXCIjRkZGRkZGXCI7XG4gICAgICAgIGxldCB0b29sdGlwOm51bWJlciA9IDA7XG4gICAgICAgIGZvcihpPTA7IGk8bGVnLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgdGVtcGVyYXR1cmU6bnVtYmVyID0gbGVnW2ldIC8gMTAwO1xuICAgICAgICAgICAgaWYoIHRlbXBlcmF0dXJlIDw9IDE1IClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2xvdXIgPSBcIiNGRkZGRkZcIjtcbiAgICAgICAgICAgICAgICB0b29sdGlwID0gdGVtcGVyYXR1cmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKCAxNSA8IHRlbXBlcmF0dXJlICYmIHRlbXBlcmF0dXJlIDw9IDIwIClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2xvdXIgPSBcIiMwMEVBRkZcIjtcbiAgICAgICAgICAgICAgICB0b29sdGlwID0gdGVtcGVyYXR1cmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKCAyMCA8IHRlbXBlcmF0dXJlICYmIHRlbXBlcmF0dXJlIDw9IDI0IClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2xvdXIgPSBcIiMwMDdFRkZcIjtcbiAgICAgICAgICAgICAgICB0b29sdGlwID0gdGVtcGVyYXR1cmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKCAyNCA8IHRlbXBlcmF0dXJlICYmIHRlbXBlcmF0dXJlIDw9IDI1IClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2xvdXIgPSBcIiMwMDJBRkZcIjtcbiAgICAgICAgICAgICAgICB0b29sdGlwID0gdGVtcGVyYXR1cmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKCAyNSA8IHRlbXBlcmF0dXJlICYmIHRlbXBlcmF0dXJlIDw9IDI2IClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2xvdXIgPSBcIiM0ODAwRkZcIjtcbiAgICAgICAgICAgICAgICB0b29sdGlwID0gdGVtcGVyYXR1cmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKCAyNiA8IHRlbXBlcmF0dXJlICYmIHRlbXBlcmF0dXJlIDw9IDI3IClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2xvdXIgPSBcIiNCQTAwRkZcIjtcbiAgICAgICAgICAgICAgICB0b29sdGlwID0gdGVtcGVyYXR1cmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKCAyNyA8IHRlbXBlcmF0dXJlICYmIHRlbXBlcmF0dXJlIDw9IDI5IClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2xvdXIgPSBcIiNGRjAwQjRcIjtcbiAgICAgICAgICAgICAgICB0b29sdGlwID0gdGVtcGVyYXR1cmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29sb3VyID0gXCIjRkYwMDAwXCI7XG4gICAgICAgICAgICAgICAgdG9vbHRpcCA9IHRlbXBlcmF0dXJlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGVnQ29sb3Vyc1tpXSA9IGNvbG91cjtcbiAgICAgICAgICAgIGxlZ1Rvb2x0aXBzW2ldID0gU3RyaW5nKHRvb2x0aXApO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
